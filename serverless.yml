service: doing-api

useDotenv: true

custom:
  stage: ${opt:stage, 'dev'}
  env: ${lower(${self:custom.stage})}
  layerName: ${self:service}-dependencies-${self:custom.stage}
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    useChildProcesses: true
    noTimeout: true
  vpcSettings:
    prod:
      securityGroupIds: ${split(${env:SECURITY_GROUP_IDS, 'sg-052314a1eec2f2567'}, ',')}
      subnetIds: ${split(${env:SUBNET_IDS, 'subnet-01a6b61d749d10c46'}, ',')}
    current: ${ternary( ${self:custom.env}, prod, ${self:custom.vpcSettings.prod}, ~ )}

provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 512 # Reduced from 1024MB for cost optimization
  timeout: 10
  region: ${env:AWS_REGION, 'us-east-2'}
  stage: ${self:custom.stage}
  iam:
    role: arn:aws:iam::${aws:accountId}:role/ChurchAppsRole
  environment:
    APP_ENV: ${self:custom.env}
  logs:
    httpApi:
      logRetentionInDays: 1
  apiGateway:
    throttle:
      rateLimit: 5 # 5 requests per second per IP
      burstLimit: 20 # Allow bursts up to 20 requests per second

package:
  individually: true
  patterns:
    - "!.git/**"
    - "!.gitignore"
    - "!README.md"
    - "!*.md"

layers:
  dependencies:
    name: ${self:custom.layerName}
    path: layer
    retain: false

functions:
  api:
    name: doing-api-${self:custom.stage}-api
    handler: lambda.universal
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - http:
          path: /{proxy+}
          method: ANY
      - http:
          path: /
          method: ANY
    vpc: ${self:custom.vpcSettings.current}
    package:
      patterns:
        - "!package-lock.json"
        - "!tsconfig.json"
        - "!src/**"
        - "!tools/**"
        - "!*.md"
        - "!Dockerfile"
        - "!.git/**"
        - "!.gitignore"
        - "!README.md"
        - "!node_modules/**"
  nightly:
    name: doing-api-${self:custom.stage}-nightly
    handler: lambda.nightly
    memorySize: 256 # Reduced from 1024MB for lightweight timer
    timeout: 60 # Add explicit timeout for scheduled task
    layers:
      - { Ref: DependenciesLambdaLayer }
    vpc: ${self:custom.vpcSettings.current}

plugins:
  - serverless-plugin-utils
  - serverless-offline
